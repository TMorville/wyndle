[project]
name = "wyndle"
version = "0.1.0"
description = "Wyndle: Your helpful Slack conversation assistant and MCP server"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "pyyaml",
  "slack_sdk",
  "openai",
  "anthropic",
  "python-dotenv",
  "requests",
  "fastmcp",
  "duckdb>=0.10.0",
  "aiohttp>=3.9",
  "pytest>=8.4.1",
  "pytest-asyncio>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/TMorville/kinami"

[tool.setuptools]
packages = ["analysis", "data", "ingest", "slack_client"]
package-dir = {"" = "src"}

[project.scripts]
wyndle-pipeline = "cli:main"
wyndle-server = "server:mcp.run"
wyndle-loader = "ingest.runner:cli_main"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
dev = [
    "ruff>=0.5.5",
    "mypy>=1.11.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "bandit>=1.7.0",
    "pip-audit>=2.6.0",
    "twine>=4.0.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "A",   # flake8-builtins
    "SIM", # flake8-simplify
    "PT",  # flake8-pytest-style
]
ignore = [
    "E501", # line too long (handled by formatter)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.per-file-ignores]
"src/server.py" = ["E402"]  # Import order needed for warning suppression  
"src/cli.py" = ["T201"]  # Print statements allowed in CLI
"tests/**" = ["T201"]  # Print statements allowed in tests

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Allow some flexibility for CI environments
ignore_missing_imports = false
exclude = "(^|/)(data|slack_client)/"

[[tool.mypy.overrides]]
module = [
    "slack_sdk.*",
    "fastmcp.*", 
    "duckdb.*",
    "anthropic.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "src.*",
]
disable_error_code = ["type-arg", "import-untyped", "no-any-return", "import-not-found"]  # Allow for internal modules and complex APIs

[[tool.mypy.overrides]]
module = "config"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
